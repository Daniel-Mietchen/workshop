---

# A template for workshop Exercise D

kind: Template
apiVersion: v1
metadata:
  name: pysimple
  annotations:
    description: The PySimple Exercise Application (Deployment Configuration)
labels:
  template: pysimple

# ----------
# Parameters
# ----------

parameters:

- name: NAME
  value: pysimple

- name: IMAGE
  value: alanbchristie/pysimple:2019.3

# -------
# Objects
# -------

objects:

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    template:
      metadata:
        labels:
          name: ${NAME}
      spec:
        containers:
        - image: ${IMAGE}
          name: ${NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          # Ideally, define container (Pod) resources
          # i.e. memory and CPU expectations...
          resources:
            limits:
              cpu: 1000m
              memory: 32Mi
            requests:
              cpu: 100m
              memory: 8Mi
          # Ideally, define container probes.
          # Used by Kubernetes to determine Pod health...
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
          # Declare volume 'mounts'.
          # i.e. where volumes appear in the application container
          #      by setting a 'mountPath' and naming the 'volume' to mount.
          volumeMounts:
          - mountPath: /data
            name: pysimple
        # Declare volumes that can be mounted.
        # Here we give each a 'name' (used in a corresponding 'volumeMount')
        # and identify the name of the volume claim that provides the physical
        # storage.
        volumes:
        - name: pysimple
          persistentVolumeClaim:
            claimName: pysimple